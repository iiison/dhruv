{"version":3,"sources":["redux/modules/test.js","redux/utils/reduxUtils.js","redux/modules/home/home.js","configs/store.js","screens/home/Home.jsx","configs/routes.jsx","serviceWorker.js","index.js","screens/home/images/monk.png"],"names":["initialState","isFetching","isAuthed","error","test","state","action","options","GET_USER","GET_USER_FAILURE","GET_USER_SUCCESS","userInfo","response","type","makeActionByType","actionName","success","failure","defaultState","home","additionalActions","shouldMergeDefaultStates","mergedState","moreActions","makeReducer","query","SET_QUERY_RESULTS","files","setQueryResults","store","createStore","combineReducers","reducers","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","func","formatFileNames","filteredFiles","setSelectedFile","push","pathname","fileExtensionElementMap","js","class","css","tpl","html","jsx","default","map","fileName","extension","slice","lastIndexOf","iconElement","onClick","includes","socket","emit","operation","renderFile","className","goHome","path","App","useState","setFiles","selectedFile","message","setMessage","renderedContent","setRenderedContent","dispatch","useDispatch","location","useLocation","history","useHistory","useEffect","commands","file","replace","toLowerCase","fileIndex","on","data","console","log","length","fileContent","annyang","addCommands","setupAnnyang","Prism","highlightAll","pr","src","monk","alt","tabSize","width","fontSize","theme","mode","name","value","enableLiveAutocompletion","editorProps","$blockScrolling","onChange","code","routes","exact","component","Home","Boolean","hostname","match","io","setLanguage","start","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"yWAoDO,IAAMA,EAAe,CAC1BC,YAAa,EACbC,UAAa,EACbC,MAAa,IAGA,SAASC,IAAoC,IAA/BC,EAA8B,uDAAtBL,EAAcM,EAAQ,uCACnDC,EAAU,CACdC,SAAW,iCACNH,EADM,CAETJ,YAAa,KAEfQ,iBAAmB,iCACdJ,EADc,CAEjBJ,YAAa,EACbE,MAAaG,EAAOH,SAEtBO,iBAAmB,iCACdL,EADc,CAEjBJ,YAAa,EACbE,MAAa,GACbQ,SAAaL,EAAOM,aAIxB,OAAON,EAAOO,MAAQN,EAAQD,EAAOO,MAAQN,EAAQD,EAAOO,QAAUR,E,YC1ExE,SAASS,EAAiBC,EAAYF,GAMpC,MAAO,CACLA,KAAI,UAAME,GAAN,OANe,CACnBC,QAAU,WACVC,QAAU,YAI0BJ,KA2BxC,IAAMK,EAAe,CACnBjB,YAAa,EACbE,MAAa,ICrCf,IAAMgB,EDwCC,YAKH,IAJFJ,EAIC,EAJDA,WACAK,EAGC,EAHDA,kBAGC,IAFDpB,oBAEC,MAFckB,EAEd,MADDG,yBAEMC,OADL,SAC2C,eAErCJ,EAFqC,GAGrClB,GACDA,EAEN,OAAO,WAAwC,IAAD,EAA7BK,EAA6B,uDAArBiB,EAAahB,EAAQ,uCACtCiB,EAAcH,EAAoBA,EAAkBf,EAAOC,GAAU,GACrEC,EAAO,gCACVQ,GAAc,iCACVV,EADU,CAEbJ,YAAa,OAHJ,cAKVa,EAAiBC,EAAY,WAAWF,MAAQ,iCAC5CR,EAD4C,CAE/CJ,YAAa,EACbE,MAAaG,EAAOH,WARX,cAUVW,EAAiBC,EAAY,WAAWF,MAAQ,iCAC5CR,EAD4C,CAE/CF,MAAa,GACbF,YAAa,EACbW,SAAaN,EAAOM,cAdX,GAgBRW,GAGL,OAAOjB,EAAOO,MAAQN,EAAQD,EAAOO,MAAQN,EAAQD,EAAOO,QAAUR,GCzE7DmB,CAAY,CACvBT,WAAa,OACbM,0BAA2B,EAC3BrB,aAAe,CACbyB,MAAQ,IAEVL,kBANuB,SAMLf,EAAOC,GACvB,MAAO,CACLoB,kBAAoB,iCACfrB,EADe,CAElBsB,MAAQrB,EAAOqB,aAQhB,SAASC,IAA8B,IAAbD,EAAY,uDAAJ,GACvC,MAAO,CACLd,KAJsB,oBAKtBc,SAIWR,QCVAU,EARCC,YACdC,YAAgB,eACXC,IAELC,YAAQC,YAAgBC,KACtBC,OAAOC,6BAA+BD,OAAOC,+BAAiC,SAACC,GAAD,OAAUA,K,sLCyB5F,SAASC,EAAT,GAA8E,IAAnDC,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,gBAAiBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACzDC,EAA0B,CAC9BC,GAAU,uBAAGC,MAAM,qBACnBC,IAAU,uBAAGD,MAAM,oBACnBE,IAAU,uBAAGF,MAAM,iBACnBG,KAAU,uBAAGH,MAAM,iBACnBI,IAAU,uBAAGJ,MAAM,iBACnBK,QAAU,uBAAGL,MAAM,iBAErB,OAAON,EAAcY,KAAI,SAACC,GACxB,IAAMC,EAAYD,EAASE,MAAMF,EAASG,YAAY,KAAO,GACvDC,EAAcb,EAAwBU,IAAcV,EAAwBO,QAElF,OACE,uBAAGO,QAAS,kBA1BlB,YAAoE,IAA9CjB,EAA6C,EAA7CA,gBAAiBY,EAA4B,EAA5BA,SAAUX,EAAkB,EAAlBA,KAAkB,EAAZC,SACvCgB,SAAS,aACrBjB,EAAK,iBAEPD,EAAgBY,GAEhBO,EAAOC,KAAK,aAAc,CACxBC,UAAY,SACZT,aAkBoBU,CAAW,CAAEtB,kBAAiBY,WAAUX,OAAMC,cAAaqB,UAAU,aACpFP,EADH,IACiBJ,MAMvB,SAASY,EAAOC,EAAMxB,GACP,MAATwB,GACFxB,EAAK,KAqIMyB,MArDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACLzC,EADK,KACE0C,EADF,OAE6BD,mBAAS,IAFtC,mBAELE,EAFK,KAES7B,EAFT,OAGmB2B,mBAAS,6BAH5B,mBAGLG,EAHK,KAGIC,EAHJ,OAImCJ,mBAAS,IAJ5C,mBAILK,EAJK,KAIYC,EAJZ,KAKPC,EAAWC,cACXC,EAAWC,cACXC,EAAUC,cAehB,OAbAC,qBAAU,kBArFZ,YAQI,IAPFF,EAOC,EAPDA,QACAF,EAMC,EANDA,SACAF,EAKC,EALDA,SACAN,EAIC,EAJDA,SACAG,EAGC,EAHDA,WACA/B,EAEC,EAFDA,gBACAiC,EACC,EADDA,mBAEMQ,EAAW,CACf,MAAU,WACRjB,EAAOY,EAASlC,SAAUoC,EAAQrC,MAClC8B,EAAW,kCAGb,wBAA0B,SAACW,GACzBlB,EAAOY,EAASlC,SAAUoC,EAAQrC,MAClC8B,EAAW,QAAD,OAASW,IAEnBvB,EAAOC,KAAK,WAAY,CACtBC,UAAY,OACZqB,KAAO,UAAGA,EAAKC,QAAQ,MAAO,KAAMC,iBAIxC,yBAA2B,SAACC,GAC1Bd,EAAW,YAAD,OAAac,MAS3B1B,EAAO2B,GAAG,YAAY,WAAgB,IAAfC,EAAc,uDAAP,GACpBhD,EAAwBgD,EAAxBhD,cAAe2C,EAASK,EAATL,KACfzC,EAASqC,EAATrC,KACAC,EAAakC,EAAblC,SAER8C,QAAQC,IAAI,iCACZD,QAAQC,IAAIb,GACZY,QAAQC,IAAI,iCAERlD,GAAiBA,EAAcmD,QACjCnB,EAAW,WAAD,OAAYhC,EAAcmD,OAA1B,YACVtB,EAAS9B,EAAgB,CAAEC,gBAAeC,kBAAiBC,OAAMC,cACjEgC,EAAS/C,EAAgBY,MAEzBgC,EAAW,4CAAD,OAA6CW,EAA7C,MACVd,EAAS,KAGXoB,QAAQC,IAAIF,MAGd5B,EAAO2B,GAAG,cAAc,WAAgB,IAAfC,EAAc,uDAAP,GACtBI,EAA0BJ,EAA1BI,YAAavC,EAAamC,EAAbnC,SAErBmB,EAAW,GAAD,OAAInB,EAAJ,OACVqB,EAAmBkB,GAUnBH,QAAQC,IAAIF,MAGdK,IAAQC,YAAYZ,GAYJa,CAAa,CAC3BrB,qBACAjC,kBACA+B,aACAH,WACAM,WACAE,WACAE,cACE,IAEJE,qBAAU,kBAAM,kBAAMe,IAAMC,kBAAgB,CAACxB,IAC7CrC,OAAO8D,GAAKF,IAGV,yBAAKhC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,gBAAgBmC,IAAKC,IAAMC,IAAI,SAC9C,2BACG9B,EACD,yBAAKP,UAAU,UACZrC,EAAMgE,OAAS,GAAKhE,GAGrB8C,GACE,kBAAC,IAAD,CACE6B,QAAS,EACTC,MAAM,OACNC,SAAU,GACVC,MAAM,UACNC,KAAK,aACLC,KAAMrC,EACNsC,MAAOnC,EACPoC,0BAA0B,EAC1BC,YAAa,CAAEC,iBAAiB,GAChCC,SAAU,SAAAC,GAAI,OAAIvC,EAAmBuC,UCjKtCC,EAXA,kBACb,yBAAKlD,UAAU,YACb,yBAAKA,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmD,OAAO,EAAMjD,KAAK,IAAIkD,UAAWC,IACxC,kBAAC,IAAD,CAAOnD,KAAK,kBAAkBkD,UAAWC,Q,OCN7BC,QACW,cAA7BlF,OAAOyC,SAAS0C,UAEe,UAA7BnF,OAAOyC,SAAS0C,UAEhBnF,OAAOyC,SAAS0C,SAASC,MACvB,2DClBN,uCAYO,IAAM5D,EAAS6D,MAEtB5B,IAAQ6B,YAAY,SACpB7B,IAAQ8B,QAERC,IAASC,OACP,kBAAC,IAAD,CAAUhG,MAAOA,GACf,kBAAC,IAAD,KACGqF,MAGLY,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.57086c96.chunk.js","sourcesContent":["// import { get } from '$UTILS/requestHandler'\n// import errorTypeDetailMap from '$CONFIG/errorTypeDetailMap'\n\nexport const GET_USER = 'GET_USER'\nexport const GET_USER_SUCCESS = 'GET_USER_SUCCESS'\nexport const GET_USER_FAILURE = 'GET_USER_FAILURE'\n\nexport function getUser() {\n  return {\n    type : GET_USER\n  }\n}\n\nexport function getUserFailure(error = '') {\n  return {\n    type  : GET_USER_FAILURE,\n    error\n  }\n}\n\nexport function getUserSuccess(response) {\n  return {\n    type : GET_USER_SUCCESS,\n    response\n  }\n}\n\n// Async Action Creators Starts\nexport function fetchUser() {\n  return async (dispatch) => {\n    dispatch(getUser())\n\n    try {\n      // const response = await get({\n      //   path    : 'some/path',\n      //   payload : {},\n      //   dispatch\n      // })\n\n      const body = await fetch('https://backendapi.turing.com/departments')\n      const response = await body.json()\n\n      dispatch(getUserSuccess(response))\n    } catch (error){\n      dispatch(getUserFailure(error.message))\n\n      throw error.message\n    }\n  }\n}\n// Async Action Creators Ends\n\nexport const initialState = {\n  isFetching : false,\n  isAuthed   : false,\n  error      : ''\n}\n\nexport default function test(state = initialState, action) {\n  const options = {\n    GET_USER : () => ({\n      ...state,\n      isFetching : true\n    }),\n    GET_USER_FAILURE : () => ({\n      ...state,\n      isFetching : false,\n      error      : action.error\n    }),\n    GET_USER_SUCCESS : () => ({\n      ...state,\n      isFetching : false,\n      error      : '',\n      userInfo   : action.response\n    })\n  }\n\n  return action.type && options[action.type] ? options[action.type]() : state\n}\n\n","// import errorTypeDetailMap from '$CONFIG/errorTypeDetailMap'\nconst errorTypeDetailMap = {}\n\nfunction makeActionByType(actionName, type) {\n  const typeValueMap = {\n    success : '_SUCCESS',\n    failure : '_FAILURE'\n  }\n\n  return {\n    type : `${actionName}${typeValueMap[type]}`\n  }\n}\n\nexport function makeActions(actionName) {\n  return {\n    defaultAction(options = {}) {\n      return {\n        type : actionName,\n        ...options\n      }\n    },\n    successAction(response) {\n      return {\n        ...makeActionByType(actionName, 'success'),\n        response\n      }\n    },\n    failureAction(error = errorTypeDetailMap.generic) {\n      return {\n        ...makeActionByType(actionName, 'failure'),\n        error\n      }\n    }\n  }\n}\n\nconst defaultState = {\n  isFetching : true,\n  error      : ''\n}\n\nexport function makeReducer({\n  actionName,\n  additionalActions,\n  initialState = defaultState,\n  shouldMergeDefaultStates = false\n}) {\n  const mergedState = shouldMergeDefaultStates \n    ? {\n      ...defaultState,\n      ...initialState\n    } : initialState\n\n  return function (state = mergedState, action) {\n    const moreActions = additionalActions ? additionalActions(state, action) : {}\n    const options = {\n      [actionName] : () => ({\n        ...state,\n        isFetching : true\n      }),\n      [makeActionByType(actionName, 'failure').type] : () => ({\n        ...state,\n        isFetching : false,\n        error      : action.error\n      }),\n      [makeActionByType(actionName, 'success').type] : () => ({\n        ...state,\n        error      : '',\n        isFetching : false,\n        response   : action.response\n      }),\n      ...moreActions\n    }\n\n    return action.type && options[action.type] ? options[action.type]() : state\n  }\n}\n\n","import { makeReducer } from '../../utils/reduxUtils'\n\nconst home = makeReducer({\n  actionName : 'file',\n  shouldMergeDefaultStates : true,\n  initialState : {\n    query : ''\n  },\n  additionalActions(state, action) {\n    return {\n      SET_QUERY_RESULTS : () => ({\n        ...state,\n        files : action.files\n      })\n    }\n  }\n})\n\nconst SET_QUERY_RESULTS = 'SET_QUERY_RESULTS'\n\nexport function setQueryResults (files = '') {\n  return {\n    type : SET_QUERY_RESULTS,\n    files\n  }\n}\n\nexport default home\n\n","import thunk from 'redux-thunk'\nimport {\n  createStore,\n  combineReducers,\n  applyMiddleware,\n  compose\n} from 'redux'\nimport * as reducers from '../redux'\n\nconst store   = createStore(\n  combineReducers({\n    ...reducers\n  }),\n  compose(applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : (func) => func)\n)\n\nexport default store\n\n","import React, { useState, useEffect } from 'react';\nimport Prism                          from 'prismjs'\nimport { useSelector, useDispatch }   from 'react-redux';\nimport { useLocation, useHistory }    from 'react-router-dom'\nimport annyang                        from 'annyang'\n\nimport { socket } from '../../index'\nimport { setQueryResults } from '../../redux/modules/home/home'\n\n// react-simple-code-editor Deps\n// import Editor                         from 'react-simple-code-editor';\n// import { highlight, languages }       from 'prismjs/components/prism-core'\n\n// react-ace deps\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-monokai';\n\nimport monk from './images/monk.png'\n\nimport '@fortawesome/fontawesome-free/css/fontawesome.min.css'\nimport '@fortawesome/fontawesome-free/css/all.min.css'\nimport '@fortawesome/fontawesome-free/css/solid.min.css'\nimport './App.css';\n\n// const socket = io();\n\nfunction renderFile({ setSelectedFile, fileName, push, pathname }) {\n  if (!pathname.includes('/explore')){\n    push('/explore/home')\n  }\n  setSelectedFile(fileName)\n\n  socket.emit('renderFile', {\n    operation : 'render',\n    fileName\n  }) \n}\n\nfunction formatFileNames({ filteredFiles, setSelectedFile, push, pathname }) {\n  const fileExtensionElementMap = {\n    js      : <i class='fab fa-js-square'></i>,\n    css     : <i class='fab fa-css3-alt'></i>,\n    tpl     : <i class='fab fa-html5'></i>,\n    html    : <i class='fab fa-html5'></i>,\n    jsx     : <i class='fab fa-react'></i>,\n    default : <i class='fas fa-code'></i>,\n  }\n  return filteredFiles.map((fileName) => {\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1)\n    const iconElement = fileExtensionElementMap[extension] || fileExtensionElementMap.default\n\n    return (\n      <p onClick={() => renderFile({ setSelectedFile, fileName, push, pathname })} className='file-item'>\n        {iconElement} {fileName}\n      </p>\n    )\n  })\n}\n\nfunction goHome(path, push) {\n  if (path !== '/') {\n    push('/')\n  }\n}\n\nfunction setupAnnyang({\n  history,\n  location,\n  dispatch,\n  setFiles,\n  setMessage,\n  setSelectedFile,\n  setRenderedContent,\n}) {\n  const commands = {\n    'hello' : () => {\n      goHome(location.pathname, history.push)\n      setMessage('Hey Man! Let\\'s do this thing!');\n    },\n\n    'search for file *file' : (file) => {\n      goHome(location.pathname, history.push)\n      setMessage(`open ${file}`)\n\n      socket.emit('openFile', {\n        operation : 'open',\n        file : `${file.replace(/\\s/g, '')}`.toLowerCase()\n      });\n    },\n\n    'select :fileIndex file' : (fileIndex) => {\n      setMessage(`Selected ${fileIndex}`)\n\n      // socket.emit('openFile', {\n      //   operation : 'open',\n      //   file : `${file.replace(/\\s/g, '')}`.toLowerCase()\n      // })\n    }\n  }\n\n  socket.on('openFile', (data = {}) => {\n    const { filteredFiles, file } = data\n    const { push } = history\n    const { pathname } = location\n\n    console.log('*****************************')\n    console.log(location)\n    console.log('*****************************')\n\n    if (filteredFiles && filteredFiles.length) {\n      setMessage(`I found ${filteredFiles.length} files:`)\n      setFiles(formatFileNames({ filteredFiles, setSelectedFile, push, pathname }))\n      dispatch(setQueryResults(filteredFiles))\n    } else {\n      setMessage(`I couldn't find any file with this name: ${file}.`)\n      setFiles([])\n    }\n\n    console.log(data)\n  })\n\n  socket.on('renderFile', (data = {}) => {\n    const { fileContent, fileName } = data\n\n    setMessage(`${fileName}: `)\n    setRenderedContent(fileContent)\n\n    // if (filteredFiles && filteredFiles.length) {\n    //   setMessage(`I found ${filteredFiles.length} files:`)\n    //   setFiles(formatFileNames({ filteredFiles, setSelectedFile }))\n    // } else {\n    //   setMessage(`I couldn't find any file with this name: ${file}.`)\n    //   setFiles([])\n    // }\n\n    console.log(data)\n  })\n\n  annyang.addCommands(commands)\n}\n\nfunction App() {\n  const [ files, setFiles ] = useState([])\n  const [ selectedFile, setSelectedFile ] = useState([])\n  const [ message, setMessage ] = useState('Ask something to Rudra...')\n  const [ renderedContent, setRenderedContent ] = useState('')\n  const dispatch = useDispatch()\n  const location = useLocation()\n  const history = useHistory()\n\n  useEffect(() => setupAnnyang({\n    setRenderedContent,\n    setSelectedFile,\n    setMessage,\n    setFiles,\n    dispatch,\n    location,\n    history\n  }), [])\n\n  useEffect(() => () => Prism.highlightAll(), [renderedContent])\n  window.pr = Prism\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img className='monk App-logo' src={monk} alt='logo' />\n        <p>\n          {message}\n          <div className='t-left'>\n            {files.length > 0 && files}\n          </div>\n          {\n            renderedContent && (\n              <AceEditor\n                tabSize={2}\n                width='auto'\n                fontSize={18}\n                theme='monokai'\n                mode='javascript'\n                name={selectedFile}\n                value={renderedContent}\n                enableLiveAutocompletion={true}\n                editorProps={{ $blockScrolling: true }}\n                onChange={code => setRenderedContent(code)}\n              />\n            )\n          }\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n <pre className='line-numbers'>\n  <code className='language-js'>\n    {renderedContent}\n  </code>\n</pre>\n*/\n\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\n// import Test from '$COMPONENTS/test'\n// import Test2 from '$COMPONENTS/Test2'\n\nimport Home from '../screens/home/Home'\n\n// import {\n//   Home,\n//   RepoDetails\n// } from '$CONTAINERS'\n\nconst routes = () => (\n  <div className='app grid'>\n    <div className='col'>\n      <Switch>\n        <Route exact={true} path='/' component={Home} />\n        <Route path='/explore/:query' component={Home} />\n      </Switch>\n    </div>\n  </div>\n)\n\nexport default routes\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport io from 'socket.io-client'\nimport annyang from 'annyang'\n\nimport store from './configs/store'\nimport routes from './configs/routes'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nexport const socket = io()\n\nannyang.setLanguage('en-IN')\nannyang.start()\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      {routes()}\n    </BrowserRouter>\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","module.exports = __webpack_public_path__ + \"static/media/monk.188e60c7.png\";"],"sourceRoot":""}